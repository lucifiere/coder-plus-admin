package ${_base_pk};

/**
 * Delegate for thriftParam.
 * 统一处理基础类型默认值问题(上游没有set,则返回null).
 * 注:需要此逻辑的基础类型字段,在idl中应该设置optional标识,否则isSetXX()会恒为true.
 *
 * @see ${_m_cf}
 *
 * Generated by Coder-Plus
 * Date ${.now}
 */
public class ${_m_cf}Delegate {
    /**
     * 被委托的thrift对象 ${_m_cf}
     */
    private ${_m_cf} delegate;

    /**
     * 构造函数
     */
    private ${_m_cf}(${_m_cf}Delegate delegate) {
        this.delegate = delegate;
    }

    /**
     * 构造函数
     */
    public static ${_m_cf} of(${_m_cf}Delegate delegate) {
        return new ${_m_cf}(delegate);
    }

    /**
     * 获取原始thrift对象 ${_m_cf}
     */
    public ${_m_cf}Delegate getDelegate() {
        return this.delegate;
    }

    /**
     * 私有变量的getter,先通过isSetXX()判断上游有没有设置,如果设置则调用thrfit的getter,反之返回null
     */
<#list primitive_f as filed>
    public ${filed._f_jt} get${filed._f_cf}() {
        return this.delegate.isSet${filed._f_cf}() ? this.delegate.get${filed._f_cf}() : null;
    }

    public void set${filed._f_cf}(${filed._f_jt} ${filed._f_c}) {
        this.delegate.set${filed._f_cf}(${filed._f_c});
    }

</#list>

    /**
     * 其他变量直接调用thrift的getter和setter
     */
<#list _f as filed>
    public ${filed._f_jt} get${filed._f_cf}() {
        return this.delegate.get${filed._f_cf}();
    }

    public void set${filed._f_cf}(${filed._f_jt} ${filed._f_c}) {
        this.delegate.set${filed._f_cf}(${filed._f_c});
    }

</#list>
}
